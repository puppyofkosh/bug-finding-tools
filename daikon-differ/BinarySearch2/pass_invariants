===========================================================================
Main:::CLASS
Main.$assertionsDisabled == false
===========================================================================
Main.bsearch(int[], int):::ENTER
a != null
daikon.Quant.eltwiseLTE(a)
===========================================================================
Main.bsearch(int[], int):::EXIT43
\old(key) == daikon.Quant.getElement_int(a, \result)
\old(key) == \old(daikon.Quant.getElement_int(a, \new(\result)))
===========================================================================
Main.bsearch(int[], int):::EXIT50
\result == -1
\result < daikon.Quant.size(a)-1
\old(key) != daikon.Quant.size(a)-1
===========================================================================
Main.bsearch(int[], int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(a, \old(a))
(\old(key) != daikon.Quant.size(a)-1) || !(\result == -1)
(\result < daikon.Quant.size(a)-1) || !(\result == -1)
daikon.Quant.eltwiseLTE(a)
\result >= -1
\result <= daikon.Quant.size(a)-1
===========================================================================
Main.end_loop_inv(int, int[], int, int, int):::ENTER
a != null
daikon.Quant.eltwiseLTE(a)
lo >= 0
mid >= 0
hi >= -1
key != daikon.Quant.size(a)-1
key != daikon.Quant.getElement_int(a, mid)
lo <= daikon.Quant.size(a)-1
mid <= daikon.Quant.size(a)-1
hi <= daikon.Quant.size(a)
hi != daikon.Quant.size(a)-1
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, lo)
===========================================================================
Main.end_loop_inv(int, int[], int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(a, \old(a))
daikon.Quant.eltwiseLTE(a)
\old(key) != daikon.Quant.size(a)-1
\old(key) != daikon.Quant.getElement_int(a, \old(mid))
\old(lo) <= daikon.Quant.size(a)-1
\old(mid) <= daikon.Quant.size(a)-1
\old(hi) != daikon.Quant.size(a)-1
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, \old(lo))
===========================================================================
Main.inc_lo_loop_inv(int, int[], int, int, int):::ENTER
daikon.Quant.getElement_int(a, lo-1) == daikon.Quant.getElement_int(a, mid)
a != null
daikon.Quant.eltwiseLTE(a)
lo >= 1
mid >= 0
hi >= 1
key != daikon.Quant.size(a)-1
key > daikon.Quant.getElement_int(a, mid)
lo - mid - 1 == 0
lo <= daikon.Quant.size(a)-1
mid <= hi
mid < daikon.Quant.size(a)-1
mid <= daikon.Quant.getElement_int(a, lo)
hi <= daikon.Quant.size(a)
hi != daikon.Quant.size(a)-1
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, lo)
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, hi-1)
daikon.Quant.getElement_int(a, lo) > daikon.Quant.getElement_int(a, mid)
===========================================================================
Main.inc_lo_loop_inv(int, int[], int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(a, \old(a))
daikon.Quant.getElement_int(a, \old(lo)-1) == daikon.Quant.getElement_int(a, \old(mid))
daikon.Quant.getElement_int(a, \old(mid)) == \old(daikon.Quant.getElement_int(a, \new(lo)-1))
daikon.Quant.getElement_int(a, \old(mid)) == \old(daikon.Quant.getElement_int(a, lo-1))
daikon.Quant.eltwiseLTE(a)
\old(key) != daikon.Quant.size(a)-1
\old(key) > daikon.Quant.getElement_int(a, \old(mid))
\old(lo) <= daikon.Quant.size(a)-1
\old(mid) < daikon.Quant.size(a)-1
\old(mid) <= daikon.Quant.getElement_int(a, \old(lo))
\old(hi) != daikon.Quant.size(a)-1
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, \old(lo))
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, \old(hi)-1)
daikon.Quant.getElement_int(a, \old(lo)) > daikon.Quant.getElement_int(a, \old(mid))
===========================================================================
Main.main(java.lang.String[]):::ENTER
args != null
args.getClass().getName() == java.lang.String[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsNotEqual(args, null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] { "pass" })
daikon.Quant.eltsEqual(daikon.Quant.collectObject(args, "toString()"), "pass")
args.getClass().getName().length() == 18
daikon.Quant.size(args) == 1
===========================================================================
Main.main(java.lang.String[]):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(args, \old(args))
args.getClass().getName().length() == \old(args.getClass().getName()).length()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsNotEqual(args, null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] { "pass" })
daikon.Quant.eltsEqual(daikon.Quant.collectObject(args, "toString()"), "pass")
args.getClass().getName().length() == 18
===========================================================================
Main.passingTests():::ENTER
===========================================================================
Main.passingTests():::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
===========================================================================
Main.reduce_hi_loop_inv(int, int[], int, int, int):::ENTER
a != null
daikon.Quant.eltwiseLTE(a)
lo >= 0
mid >= 0
hi >= -1
key != daikon.Quant.size(a)-1
key < daikon.Quant.getElement_int(a, mid)
lo <= mid
lo < daikon.Quant.size(a)-1
lo != daikon.Quant.getElement_int(a, lo)
lo != daikon.Quant.getElement_int(a, mid)
mid - hi - 1 == 0
mid <= daikon.Quant.size(a)-1
hi < daikon.Quant.size(a)-1
hi <= daikon.Quant.getElement_int(a, mid)
daikon.Quant.size(a) != daikon.Quant.getElement_int(a, lo)
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, lo)
daikon.Quant.getElement_int(a, lo) <= daikon.Quant.getElement_int(a, mid)
===========================================================================
Main.reduce_hi_loop_inv(int, int[], int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(a, \old(a))
daikon.Quant.eltwiseLTE(a)
\old(key) != daikon.Quant.size(a)-1
\old(key) < daikon.Quant.getElement_int(a, \old(mid))
\old(lo) < daikon.Quant.size(a)-1
\old(lo) != daikon.Quant.getElement_int(a, \old(lo))
\old(lo) != daikon.Quant.getElement_int(a, \old(mid))
\old(mid) <= daikon.Quant.size(a)-1
\old(hi) < daikon.Quant.size(a)-1
\old(hi) <= daikon.Quant.getElement_int(a, \old(mid))
daikon.Quant.size(a)-1 != daikon.Quant.getElement_int(a, \old(lo))
\old(daikon.Quant.size(a)) != daikon.Quant.getElement_int(a, \old(lo))
daikon.Quant.getElement_int(a, \old(lo)) <= daikon.Quant.getElement_int(a, \old(mid))
===========================================================================
Main.return_fail_inv(int, int, int, int[]):::ENTER
l >= 0
daikon.Quant.eltwiseLTE(arr)
l - h - 1 == 0
l <= daikon.Quant.size(arr)-1
l != daikon.Quant.getElement_int(arr, l)
h < daikon.Quant.size(arr)-1
h <= daikon.Quant.getElement_int(arr, l)
k != daikon.Quant.size(arr)-1
k < daikon.Quant.getElement_int(arr, l)
daikon.Quant.size(arr) != daikon.Quant.getElement_int(arr, l)
daikon.Quant.size(arr)-1 != daikon.Quant.getElement_int(arr, l)
===========================================================================
Main.return_fail_inv(int, int, int, int[]):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(arr, \old(arr))
daikon.Quant.eltwiseLTE(arr)
\old(l) <= daikon.Quant.size(arr)-1
\old(l) != daikon.Quant.getElement_int(arr, \old(l))
\old(h) < daikon.Quant.size(arr)-1
\old(h) <= daikon.Quant.getElement_int(arr, \old(l))
\old(k) != daikon.Quant.size(arr)-1
\old(k) < daikon.Quant.getElement_int(arr, \old(l))
daikon.Quant.size(arr)-1 != daikon.Quant.getElement_int(arr, \old(l))
\old(daikon.Quant.size(arr)) != daikon.Quant.getElement_int(arr, \old(l))
===========================================================================
Main.start_loop_inv(int, int[], int, int, int):::ENTER
a != null
daikon.Quant.eltwiseLTE(a)
lo >= 0
mid >= 0
lo <= mid
lo <= hi
lo <= daikon.Quant.size(a)-1
mid <= hi
mid <= daikon.Quant.size(a)-1
hi <= daikon.Quant.size(a)
hi != daikon.Quant.size(a)-1
daikon.Quant.getElement_int(a, lo) <= daikon.Quant.getElement_int(a, mid)
===========================================================================
Main.start_loop_inv(int, int[], int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(a, \old(a))
daikon.Quant.eltwiseLTE(a)
\old(lo) <= daikon.Quant.size(a)-1
\old(mid) <= daikon.Quant.size(a)-1
\old(hi) != daikon.Quant.size(a)-1
daikon.Quant.getElement_int(a, \old(lo)) <= daikon.Quant.getElement_int(a, \old(mid))
