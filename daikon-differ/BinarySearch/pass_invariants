===========================================================================
Main:::CLASS
Main.$assertionsDisabled == false
===========================================================================
Main.before_loop(int, int, int, int[]):::ENTER
h == daikon.Quant.size(arr)-1
l == 0
arr != null
daikon.Quant.eltwiseLTE(arr)
daikon.Quant.getElement_int(arr, l) == -500 || daikon.Quant.getElement_int(arr, l) == -1 || daikon.Quant.getElement_int(arr, l) == 1
l < h
l != daikon.Quant.getElement_int(arr, l)
l < daikon.Quant.getElement_int(arr, h)
l < daikon.Quant.getElement_int(arr, h-1)
h > daikon.Quant.getElement_int(arr, l)
h <= daikon.Quant.getElement_int(arr, h-1)
k != daikon.Quant.getElement_int(arr, h)
daikon.Quant.eltsGTE(arr, daikon.Quant.getElement_int(arr, l))
daikon.Quant.eltsLTE(arr, daikon.Quant.getElement_int(arr, h))
daikon.Quant.size(arr) <= daikon.Quant.getElement_int(arr, h)
daikon.Quant.getElement_int(arr, l) < daikon.Quant.getElement_int(arr, h)
daikon.Quant.getElement_int(arr, l) < daikon.Quant.getElement_int(arr, h-1)
daikon.Quant.getElement_int(arr, h) > daikon.Quant.getElement_int(arr, h-1)
===========================================================================
Main.before_loop(int, int, int, int[]):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(arr, \old(arr))
\old(h) == daikon.Quant.size(arr)-1
daikon.Quant.eltwiseLTE(arr)
daikon.Quant.getElement_int(arr, \old(l)) == -500 || daikon.Quant.getElement_int(arr, \old(l)) == -1 || daikon.Quant.getElement_int(arr, \old(l)) == 1
daikon.Quant.eltsGTE(arr, daikon.Quant.getElement_int(arr, \old(l)))
daikon.Quant.eltsLTE(arr, daikon.Quant.getElement_int(arr, \old(h)))
\old(l) != daikon.Quant.getElement_int(arr, \old(l))
\old(l) < daikon.Quant.getElement_int(arr, \old(h))
\old(l) < daikon.Quant.getElement_int(arr, \old(h)-1)
\old(h) > daikon.Quant.getElement_int(arr, \old(l))
\old(h) <= daikon.Quant.getElement_int(arr, \old(h)-1)
\old(k) != daikon.Quant.getElement_int(arr, \old(h))
\old(daikon.Quant.size(arr)) <= daikon.Quant.getElement_int(arr, \old(h))
daikon.Quant.getElement_int(arr, \old(l)) < daikon.Quant.getElement_int(arr, \old(h))
daikon.Quant.getElement_int(arr, \old(l)) < daikon.Quant.getElement_int(arr, \old(h)-1)
daikon.Quant.getElement_int(arr, \old(h)) > daikon.Quant.getElement_int(arr, \old(h)-1)
===========================================================================
Main.bsearch(int[], int):::ENTER
a != null
daikon.Quant.eltwiseLTE(a)
===========================================================================
Main.bsearch(int[], int):::EXIT38
\old(key) == daikon.Quant.getElement_int(a, \result)
\old(key) == \old(daikon.Quant.getElement_int(a, \new(\result)))
===========================================================================
Main.bsearch(int[], int):::EXIT48
\result == -1
\old(key) != daikon.Quant.size(a)-1
===========================================================================
Main.bsearch(int[], int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(a, \old(a))
(\old(key) != daikon.Quant.size(a)-1) || !(\result == -1)
daikon.Quant.eltwiseLTE(a)
\result >= -1
\result < daikon.Quant.size(a)-1
===========================================================================
Main.dummy_fn(int, int, int, int, int):::ENTER
l >= 0
m >= 0
l <= m
l < h
m < h
===========================================================================
Main.dummy_fn(int, int, int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
===========================================================================
Main.dummy_fn2(int, int, int, int[]):::ENTER
daikon.Quant.eltwiseLTE(arr)
l >= h
l <= daikon.Quant.size(arr)-1
l != daikon.Quant.getElement_int(arr, l)
h <= daikon.Quant.size(arr)-1
h != daikon.Quant.getElement_int(arr, l)
k != daikon.Quant.size(arr)-1
k != daikon.Quant.getElement_int(arr, l)
daikon.Quant.size(arr)-1 != daikon.Quant.getElement_int(arr, l)
===========================================================================
Main.dummy_fn2(int, int, int, int[]):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(arr, \old(arr))
daikon.Quant.eltwiseLTE(arr)
\old(l) <= daikon.Quant.size(arr)-1
\old(l) != daikon.Quant.getElement_int(arr, \old(l))
\old(h) <= daikon.Quant.size(arr)-1
\old(h) != daikon.Quant.getElement_int(arr, \old(l))
\old(k) != daikon.Quant.size(arr)-1
\old(k) != daikon.Quant.getElement_int(arr, \old(l))
daikon.Quant.size(arr)-1 != daikon.Quant.getElement_int(arr, \old(l))
===========================================================================
Main.dummy_fn_inc_lo(int, int, int, int, int):::ENTER
key > elem
key != l
l - m - 1 == 0
l <= h
m < h
===========================================================================
Main.dummy_fn_inc_lo(int, int, int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
===========================================================================
Main.dummy_fn_reduce_hi(int, int, int, int, int):::ENTER
elem == 1 || elem == 2 || elem == 950
l == 0 || l == 3
key < elem
elem > l
elem >= h
l <= m
m - h - 1 == 0
===========================================================================
Main.dummy_fn_reduce_hi(int, int, int, int, int):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
===========================================================================
Main.main(java.lang.String[]):::ENTER
args != null
args.getClass().getName() == java.lang.String[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsNotEqual(args, null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] { "pass" })
daikon.Quant.eltsEqual(daikon.Quant.collectObject(args, "toString()"), "pass")
args.getClass().getName().length() == 18
daikon.Quant.size(args) == 1
===========================================================================
Main.main(java.lang.String[]):::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
daikon.Quant.pairwiseEqual(args, \old(args))
args.getClass().getName().length() == \old(args.getClass().getName()).length()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsNotEqual(args, null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] { "pass" })
daikon.Quant.eltsEqual(daikon.Quant.collectObject(args, "toString()"), "pass")
args.getClass().getName().length() == 18
===========================================================================
Main.passingTests():::ENTER
===========================================================================
Main.passingTests():::EXIT
Main.$assertionsDisabled == \old(Main.$assertionsDisabled)
