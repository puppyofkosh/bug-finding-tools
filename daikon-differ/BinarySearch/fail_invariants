===========================================================================
Main:::CLASS
Main.$assertionsDisabled == false
===========================================================================
Main.bsearch(int[], int):::ENTER
a != null
a[] sorted by <=
===========================================================================
Main.bsearch(int[], int):::EXIT15
return == size(a[])-1
return == orig(size(a[]))-1
orig(key) == orig(size(a[]))
a[] == []
orig(a) has only one value
===========================================================================
Main.bsearch(int[], int):::EXIT36
orig(key) == a[return]
orig(key) == orig(a[post(return)])
return < size(a[])-1
===========================================================================
Main.bsearch(int[], int):::EXIT46
return == -1
return < size(a[])-1
orig(key) != size(a[])-1
===========================================================================
Main.bsearch(int[], int):::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
a[] == orig(a[])
a[] sorted by <=
return <= size(a[])-1
===========================================================================
Main.dummy_fn(int, int, int, int, int):::ENTER
l >= 0
m >= 0
l <= m
l < h
m < h
===========================================================================
Main.dummy_fn(int, int, int, int, int):::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
===========================================================================
Main.dummy_fn2(int, int, int, int[]):::ENTER
l >= 0
arr[] sorted by <=
l >= h
l <= size(arr[])-1
l != arr[l]
h <= size(arr[])-1
h != arr[l]
k != size(arr[])-1
size(arr[])-1 != arr[l]
===========================================================================
Main.dummy_fn2(int, int, int, int[]):::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
arr[] == orig(arr[])
arr[] sorted by <=
orig(l) <= size(arr[])-1
orig(l) != arr[orig(l)]
orig(h) <= size(arr[])-1
orig(h) != arr[orig(l)]
orig(k) != size(arr[])-1
size(arr[])-1 != arr[orig(l)]
===========================================================================
Main.dummy_fn_inc_lo(int, int, int, int, int):::ENTER
key > elem
key != l
l - m - 1 == 0
l <= h
m < h
===========================================================================
Main.dummy_fn_inc_lo(int, int, int, int, int):::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
===========================================================================
Main.dummy_fn_reduce_hi(int, int, int, int, int):::ENTER
elem one of { 1, 2, 950 }
l one of { 0, 3 }
key < elem
elem > l
elem >= h
l <= m
m - h - 1 == 0
===========================================================================
Main.dummy_fn_reduce_hi(int, int, int, int, int):::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
===========================================================================
Main.failingTests():::ENTER
===========================================================================
Main.failingTests():::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
===========================================================================
Main.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
Main.main(java.lang.String[]):::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
Main.passingTests():::ENTER
===========================================================================
Main.passingTests():::EXIT
Main.$assertionsDisabled == orig(Main.$assertionsDisabled)
